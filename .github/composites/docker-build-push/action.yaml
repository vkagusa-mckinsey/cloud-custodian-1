name: 'Build and Publish Docker Image'
description: 'Build and Publish Docker Image'
inputs:
  repository:
    description: 'Docker hub repository'
    required: true
    default: 'cloudcustodian'
  name:
    description: 'Image name, should match dockerfile name'
    required: true
  push:
    description: 'Push image: true/false'
    required: true
    default: false
  poetry_version:
    description: "Poetry Version to use"
    default: "1.3.1"
  platforms:
    description: "Platforms to build, e.g. linux/arm64,linux/amd64"
    default: "linux/amd64"
runs:
  using: "composite"
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    # until we get read only credentials, we'll only login if we're pushing
    # note that we can hit rate limits on pulling though
    - name: Login to Docker Hub
      if: "${{ inputs.push == 'true' }}"
      uses: docker/login-action@v2
      with:
        username: ${{ env.HUB_USER }}
        password: ${{ env.HUB_TOKEN }}

    - name: Get Tag
      id: get_tag
      shell: python
      run: |
        if "${{ github.ref }}".startswith("refs/tags"):
          print("::set-output name=tag::latest")
        elif "${{ github.ref }}" == "refs/heads/master":
          print("::set-output name=tag::dev")
        # Pull requests dont get pushed so this should be fine
        elif "${{ github.ref }}".startswith("refs/pull"):
          # ref looks like: refs/pull/$pr_number/merge
          id = "${{ github.ref }}".split("/")[-2]
          print(f"::set-output name=tag::pr-{id}")
        else:
          # this should just be the branch
          id = "${{ github.ref }}".split("/")[-1]
          print(f"::set-output name=tag::{id}")

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.repository }}/${{ inputs.name }}
        tags: |
          type=ref,event=tag
          type=raw,value=${{ steps.get_tag.outputs.tag }}
        sep-tags: ','

    # build a single platform image first in order to actually load the image from buildx
    # manifests are not supported yet
    # https://github.com/docker/buildx/issues/166
    # https://github.com/docker/buildx/issues/59
    - name: Build
      uses: docker/build-push-action@v3
      with:
        context: .
        build-args: |
          POETRY_VERSION=${{ inputs.poetry_version }}
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # makes the image available in docker, e.g. docker images inspect
        load: true
        file: "docker/${{ inputs.name }}"

    - name: Cache Poetry cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry
        key: poetry-cache-${{ runner.os }}-3.10-${{ inputs.poetry_version }}

    - name: Cache Packages
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-3.10-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        # note the usage of qutoes here for 3.10, without quotes it's interrpeted as 3.1
        python-version: "3.10"

    - name: Test
      shell: bash
      env:
        tags: ${{ steps.meta.outputs.tags }}
      run : |
        curl -sL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python - -y --version ${{ inputs.poetry_version }}

        image_var=${{inputs.name}}
        image_var=CUSTODIAN_${image_var//[-]/_}_IMAGE
        image_var=${image_var^^}
        export ${image_var}="$(echo $tags | cut -d ',' -f 1)"

        python -m venv .
        . bin/activate && poetry install
        . bin/activate && pip install docker
        . bin/activate && TEST_DOCKER=yes \
                          pytest -p no:terraform -v tests/test_docker.py

    # actually push the multi arch image
    - name: Push
      if: "${{ inputs.push == 'true' }}"
      uses: docker/build-push-action@v3.1.1
      with:
        context: .
        build-args: |
          POETRY_VERSION=${{ inputs.poetry_version }}
        push: true
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: "docker/${{ inputs.name }}"

    - name: Install cosign
      if: "${{ inputs.push == 'true' }}"
      uses: sigstore/cosign-installer@v2.8.0
      with:
        cosign-release: 'v1.13.0'

    - name: Sign
      if: "${{ inputs.push == 'true' }}"
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
        TAGS: ${{ steps.meta.outputs.tags }}
      run: |
        tags=(${TAGS//,/ })
        for i in "${tags[@]}"
        do
          cosign sign $i
        done
